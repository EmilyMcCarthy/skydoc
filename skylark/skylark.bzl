# Copyright 2016 The Bazel Authors. All rights reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

"""Skylark rules"""

load("@bazel_skylib//:skylark_library.bzl", "SkylarkLibraryInfo")

_SKYLARK_FILETYPE = FileType([".bzl"])

ZIP_PATH = "/usr/bin/zip"

def _skydoc(ctx):
  for f in ctx.files.skydoc:
    if not f.path.endswith(".py"):
      return f

def _skylark_doc_impl(ctx):
  """Implementation of the skylark_doc rule."""
  skylark_doc_zip = ctx.outputs.skylark_doc_zip
  direct = []
  transitive = []
  for dep in ctx.attr.srcs:
      if SkylarkLibraryInfo in dep:
          direct.extend(dep[SkylarkLibraryInfo].srcs)
          transitive.append(dep[SkylarkLibraryInfo].transitive_srcs)
      else:
          direct.extend(dep.files.to_list())
  inputs = depset(order="postorder", direct=direct, transitive=transitive + [
      dep[SkylarkLibraryInfo].transitive_srcs for dep in ctx.attr.deps
  ])
  sources = [source.path for source in direct]
  flags = [
      "--format=%s" % ctx.attr.format,
      "--output_file=%s" % ctx.outputs.skylark_doc_zip.path,
  ]
  if ctx.attr.strip_prefix:
    flags += ["--strip_prefix=%s" % ctx.attr.strip_prefix]
  if ctx.attr.overview:
    flags += ["--overview"]
  if ctx.attr.overview_filename:
    flags += ["--overview_filename=%s" % ctx.attr.overview_filename]
  if ctx.attr.link_ext:
    flags += ["--link_ext=%s" % ctx.attr.link_ext]
  if ctx.attr.site_root:
    flags += ["--site_root=%s" % ctx.attr.site_root]
  skydoc = _skydoc(ctx)
  ctx.action(
      inputs = list(inputs) + [skydoc],
      executable = skydoc,
      arguments = flags + sources,
      outputs = [skylark_doc_zip],
      mnemonic = "Skydoc",
      use_default_shell_env = True,
      progress_message = ("Generating Skylark doc for %s (%d files)"
                          % (ctx.label.name, len(sources))))

skylark_doc = rule(
    _skylark_doc_impl,
    attrs = {
        "srcs": attr.label_list(providers = [SkylarkLibraryInfo],
                                allow_files = _SKYLARK_FILETYPE),
        "deps": attr.label_list(providers = [SkylarkLibraryInfo],
                                allow_files = False),
        "format": attr.string(default = "markdown"),
        "strip_prefix": attr.string(),
        "overview": attr.bool(default = True),
        "overview_filename": attr.string(),
        "link_ext": attr.string(),
        "site_root": attr.string(),
        "skydoc": attr.label(
            default = Label("//skydoc"),
            cfg = "host",
            executable = True),
    },
    outputs = {
        "skylark_doc_zip": "%{name}-skydoc.zip",
    },
)
"""Generates Skylark rule documentation.

Documentation is generated in directories that follows the package structure
of the input `.bzl` files. For example, suppose the set of input files are
as follows:

* `foo/foo.bzl`
* `foo/bar/bar.bzl`

The archive generated by `skylark_doc` will contain the following generated
docs:

* `foo/foo.html`
* `foo/bar/bar.html`

Args:
  srcs: List of `.bzl` files that are processed to create this target.
  deps: List of other `skylark_library` targets that are required by the Skylark
    files listed in `srcs`.
  format: The type of output to generate. Possible values are `"markdown"` and
    `"html"`.
  strip_prefix: The directory prefix to strip from the generated output files.

    The directory prefix to strip must be common to all input files. Otherwise,
    skydoc will raise an error.
  overview: If set to `True`, then generate an overview page.
  overview_filename: The file name to use for the overview page. By default,
    the page is named `index.md` or `index.html` for Markdown and HTML output
    respectively.
  link_ext: The file extension used for links in the generated documentation.
    By default, skydoc uses `.html`.
  site_root: The site root to be prepended to all URLs in the generated
    documentation, such as links, style sheets, and images.

    This is useful if the generated documentation is served from a subdirectory
    on the web server. For example, if the skydoc site is to served from
    `https://host.com/rules`, then by setting
    `site_root = "https://host.com/rules"`, all links will be prefixed with
    the site root, for example, `https://host.com/rules/index.html`.

Outputs:
  skylark_doc_zip: A zip file containing the generated documentation.

Example:
  Suppose you have a project containing Skylark rules you want to document:

  ```
  [workspace]/
      WORKSPACE
      checkstyle/
          BUILD
          checkstyle.bzl
  ```

  To generate documentation for the rules and macros in `checkstyle.bzl`, add the
  following target to `rules/BUILD`:

  ```python
  load("@io_bazel_skydoc//skylark:skylark.bzl", "skylark_doc")

  skylark_doc(
      name = "checkstyle-docs",
      srcs = ["checkstyle.bzl"],
  )
  ```

  Running `bazel build //checkstyle:checkstyle-docs` will generate a zip file
  containing documentation for the public rules and macros in `checkstyle.bzl`.

  By default, Skydoc will generate documentation in Markdown. To generate
  a set of HTML pages that is ready to be served, set `format = "html"`.
"""

JINJA2_BUILD_FILE = """
py_library(
    name = "lib",
    srcs = glob(["jinja2/*.py"]),
    deps = ["@org_markupsafe_markupsafe//:lib"],
    visibility = ["//visibility:public"],
)
"""

MARKUPSAFE_BUILD_FILE = """
py_library(
    name = "lib",
    srcs = glob(["markupsafe/*.py"]),
    visibility = ["//visibility:public"],
)
"""

MISTUNE_BUILD_FILE = """
py_library(
    name = "lib",
    srcs = ["mistune.py"],
    visibility = ["//visibility:public"],
)
"""

SIX_BUILD_FILE = """
py_library(
    name = "lib",
    srcs = ["six.py"],
    visibility = ["//visibility:public"],
)
"""

ABSEIL_BUILD_FILE = """
py_library(
    name = "lib",
    srcs = glob(["absl/**/*.py"]),
    visibility = ["//visibility:public"],
    deps = ["@org_python_six//:lib"],
)
"""

def skydoc_repositories(exclude=[]):
  """Adds the external repositories used by the skylark rules."""
  if "org_google_protobuf" not in exclude:
    native.http_archive(
        name = "org_google_protobuf",
        url = "https://github.com/google/protobuf/archive/v3.4.1.tar.gz",
        sha256 = "8e0236242106e680b4f9f576cc44b8cd711e948b20a9fc07769b0a20ceab9cc4",
        strip_prefix = "protobuf-3.4.1",
    )

    # Protobuf expects an //external:python_headers label which would contain the
    # Python headers if fast Python protos is enabled. Since we are not using fast
    # Python protos, bind python_headers to a dummy target.
    native.bind(
        name = "python_headers",
        actual = "//:dummy",
    )

  if "org_python_six" not in exclude:
    native.new_http_archive(
        name = "org_python_six",
        url = "https://pypi.python.org/packages/source/s/six/six-1.10.0.tar.gz",
        sha256 = "105f8d68616f8248e24bf0e9372ef04d3cc10104f1980f54d57b2ce73a5ad56a",
        build_file_content = SIX_BUILD_FILE,
        strip_prefix = "six-1.10.0",
    )

  if "org_python_six" not in exclude and "org_google_protobuf" not in exclude:
    # Protobuf expects an //external:six label
    native.bind(
        name = "six",
        actual = "@org_python_six//:lib",
    )

  if "org_markupsafe_markupsafe" not in exclude:
    native.new_http_archive(
        name = "org_markupsafe_markupsafe",
        url = "https://pypi.python.org/packages/source/M/MarkupSafe/MarkupSafe-0.23.tar.gz",
        sha256 = "a4ec1aff59b95a14b45eb2e23761a0179e98319da5a7eb76b56ea8cdc7b871c3",
        build_file_content = MARKUPSAFE_BUILD_FILE,
        strip_prefix = "MarkupSafe-0.23",
    )

  if "org_jinja2_jinja2" not in exclude:
    native.new_http_archive(
        name = "org_jinja2_jinja2",
        url = "https://pypi.python.org/packages/source/J/Jinja2/Jinja2-2.8.tar.gz",
        sha256 = "bc1ff2ff88dbfacefde4ddde471d1417d3b304e8df103a7a9437d47269201bf4",
        build_file_content = JINJA2_BUILD_FILE,
        strip_prefix = "Jinja2-2.8",
    )

  if "org_mistune_mistune" not in exclude:
    native.new_http_archive(
        name = "org_mistune_mistune",
        url = "https://pypi.python.org/packages/source/m/mistune/mistune-0.7.1.tar.gz",
        sha256 = "6076dedf768348927d991f4371e5a799c6a0158b16091df08ee85ee231d929a7",
        build_file_content = MISTUNE_BUILD_FILE,
        strip_prefix = "mistune-0.7.1",
    )

  if "org_abseil_absl_py" not in exclude:
    native.new_http_archive(
        name = "org_abseil_absl_py",
        url = "https://files.pythonhosted.org/packages/source/a/absl-py/absl-py-0.1.12.tar.gz",
        sha256 = "1530c03b3566f24e9fcf20eadd60a792837899aef98e522f998fcebecf5df41b",
        build_file_content = ABSEIL_BUILD_FILE,
        strip_prefix = "absl-py-0.1.12",
    )
